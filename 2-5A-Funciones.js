
/*
Funciones

*******
Una funci√≥n es un bloque de c√≥digo que nos permite agrupar una funcionalidad 
para usarla todas las veces que necesitemos.
Normalmente, realiza una tarea espec√≠fica y retorna un valor como resultado.
*******

*/ 
// Palabra reservada , Nombre de la funci√≥n , Par√°metros (variables)
// cuerpo (la logica) , el retorno (return) 
function sumar (a, b) {
	return a + b;
}

/************ Funciones declaradas *******/
/* Son aquellas que se declaran usando la estructura b√°sica.*/
function nombreDeLaFuncion(parametros) {
    // c√≥digo...
    return valor
}

function saludar(nombre) {
	return 'Hola' + nombre;
}

/************ Funciones expresadas *******/
/* Son aquellas que se asignan como valor de una variable.
 En este caso, la funci√≥n en s√≠ no tiene nombre, es una funci√≥n an√≥nima. 
Para invocarla podremos usar el nombre de la variable que declaremos.
*/
const saludar = function(nombre) {
    return 'Hola' + nombre;
}

let triplicar = function (numero) {
	return numero * 3;
}



/*
Invocando una funci√≤n

*******
Antes de poder invocar una funci√≥n, necesitamos que haya sido declarada. 
Entonces, vamos a declarar una funci√≥n:
*/
function hacerHelado() {
	return 'üç¶';
}
/*La forma de invocar ‚Äîtambi√©n se puede decir llamar o ejecutar‚Äî una funci√≥n es
 escribiendo su nombre seguido de apertura y cierre de par√©ntesis. */
 hacerHelado(); // Retornar√° 'üç¶'

 
// Es importante respetar el orden  : JS asigna valores en el orden en que lleguen.

 function saludar(nombre, apellido) {
	return 'Hola ' + nombre + ' ' + apellido;
}

saludar('Robertito', 'Rodr√≠guez');
// retornar√° 'Hola Robertito Rodr√≠guez'

/**cuando tenemos par√°metros en nuestra funci√≥n, JS va a esperar que se los indiquemos 
 * al ejecutarla.
 */

function saludar(nombre, apellido) {
	return 'Hola ' + nombre + ' ' + apellido;
}

saludar(); // retorna 'Hola undefined undefined'

/*
Para casos como el anterior podemos definir valores por defecto.
*/
function saludar(nombre = 'visitante', 
	apellido = 'an√≥nimo') {
	return 'Hola ' + nombre + ' ' + apellido;
}

saludar(); // retornar√° 'Hola visitante an√≥nimo'



/*
Guardando los resultados

*******
En caso de querer guardar lo que retorna una funci√≥n, ser√° necesario almacenarlo en una variable.

*******
*/
function hacerHelados(cantidad) {
	return 'üç¶'.repeat(cantidad);
}

let misHelados = hacerHelados(3);   //almacenamos en variable misHelados
console.log(misHelados); // Mostrar√° en consola 'üç¶üç¶üç¶'

/*******************************
Llamamos par√°metros a las variables que escribimos cuando definimos la funci√≥n. 
Llamamos argumentos a los valores que enviamos cuando invocamos la funci√≥n.
 *******************************/

/*
Scope

*******
El scope o √°mbito se refiere al alcance que tiene una variable, es decir, desde d√≥nde podemos acceder a ella. 
En JavaScript los scopes son definidos principalmente por las funciones. */


// Scope local
function hola() {
    let saludo = 'Hola ¬øqu√© tal?';
    return saludo; //Definimos la variable saludo dentro de la funci√≥n hola(), p
    //por lo tanto su scope es local.

 }
 console.log(saludo); // saludo is not defined

 //Scope global

 let saludo = 'Hola ¬øqu√© tal?';
 function hola() {
    return saludo;
 }
 console.log(saludo); // 'Hola ¬øqu√© tal?'


 /*
 crear una funci√≥n que se va a llamar ejemplo y 
 tiene que devolver un String diciendo "hola, soy una funci√≥n". */
 function ejemplo(){
    let string = "hola, soy una funci√≥n"
    return string;
}
ejemplo();